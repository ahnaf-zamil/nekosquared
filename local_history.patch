Index: neko2/cogs/f.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- neko2/cogs/f.py	(date 1525791370000)
+++ neko2/cogs/f.py	(date 1525791370000)
@@ -11,6 +11,9 @@
 
 from neko2.shared import commands, alg, morefunctools, collections
 
+# Timeout to reset after regardless
+F_TIMEOUT = 6 * 60 * 60
+
 # Set to True to enable `f' being a valid trigger for the command without
 # a prefix.
 ENABLE_NAKED = False
@@ -22,15 +25,20 @@
 
 @dataclasses.dataclass()
 class F:
+    initial_ctx: commands.Context
     members: collections.MutableOrderedSet
     message: discord.Message
     colour: int
+    reason: typing.Optional[str] = None
+
+
+ReasonChannel = typing.Tuple[discord.TextChannel, str]
 
 
 class RespectsCog:
     def __init__(self, bot):
         self.bot = bot
-        self.buckets: typing.Dict[discord.TextChannel, F] = {}
+        self.buckets: typing.Dict[ReasonChannel, F] = {}
 
     if ENABLE_NAKED:
         async def on_message(self, message):
@@ -50,8 +58,17 @@
                 return
 
             channel = reaction.message.channel
-            b = self.buckets.get(channel)
-            
+            try:
+                b = alg.find(lambda k: k[0] == channel, list(self.buckets.keys()))
+            except:
+                # Debuggling.
+                import traceback
+                traceback.print_exc()
+                return
+
+            if b:
+                b = self.buckets[b]
+
             if b is None:
                 return
 
@@ -61,8 +78,9 @@
 
             if c1 and c2 and c3:
                 await self.append_to_bucket(b, user)
-                message: discord.Message = reaction.message
-                await message.remove_reaction(reaction, user)
+
+            message: discord.Message = reaction.message
+            await message.remove_reaction(reaction, user)
 
     @staticmethod
     async def append_to_bucket(bucket, user):
@@ -88,15 +106,31 @@
             description=message,
             colour=bucket.colour)
 
-        await bucket.message.edit(embed=embed)
+        if bucket.message:
+            await bucket.message.edit(embed=embed)
+        else:
+            bucket.message = await bucket.initial_ctx.send(embed=embed)
+
+        if ENABLE_REACT:
+            await bucket.message.add_reaction(
+                '\N{REGIONAL INDICATOR SYMBOL LETTER F}')
+
+    @morefunctools.always_background()
+    async def destroy_bucket_later(self, channel):
+        await asyncio.sleep(F_TIMEOUT)
+        if ENABLE_REACT:
+            await self.buckets[channel].message.clear_reactions()
+        del self.buckets[channel]
 
     @commands.guild_only()
     @commands.command(brief='Pay your respects.')
-    async def f(self, ctx, *, reason=None):
+    async def f(self, ctx, *, reason=''):
         try:
             await ctx.message.delete()
 
-            bucket = self.buckets.get(ctx.channel)
+            reason_low = reason.strip().lower()
+
+            bucket = self.buckets.get((ctx.channel, reason_low))
 
             # Get the last 10 recent messages. If the bucket message
             # is in there, then update, else, delete the old message if
@@ -105,13 +139,31 @@
             if bucket:
                 msg = bucket.message.id
                 most_recent = await ctx.channel.history(limit=10).flatten()
-                if msg in map(most_recent)
+
+                new_msg = alg.find(lambda m: m.id == msg, most_recent)
 
-            if ctx.channel not in self.buckets:
+                if new_msg:
+                    bucket.message = new_msg
+                else:
+                    try:
+                        await bucket.message.delete()
+                        bucket.message = None
+                    except:
+                        del self.buckets[ctx.channel]
+                        bucket = None
+                    else:
+                        return await self.append_to_bucket(bucket, ctx.author)
+
+            if bucket:
+                original_reason = bucket.reason.strip().lower()
+            else:
+                original_reason = None
+
+            if not bucket or reason and reason_low != original_reason:
 
                 colour = alg.rand_colour()
 
-                if reason is None:
+                if not reason:
                     message = await ctx.send(
                         embed=discord.Embed(
                             description=f'{ctx.author} paid their respects.',
@@ -122,19 +174,27 @@
                             description=f'{ctx.author} paid their respects for'
                                         f' {reason}'))
 
+                self.destroy_bucket_later(self, ctx.channel)
+
+                f_bucket = F(ctx,
+                             collections.MutableOrderedSet({ctx.author}),
+                             message,
+                             colour,
+                             reason)
+
+                self.buckets[(ctx.channel, reason_low)] = f_bucket
+
                 if ENABLE_REACT:
                     await message.add_reaction(
                         '\N{REGIONAL INDICATOR SYMBOL LETTER F}')
-
-                f_bucket = F(collections.MutableOrderedSet({ctx.author}),
-                             message,
-                             colour)
-
-                self.buckets[ctx.channel] = f_bucket
             else:
                 await self.append_to_bucket(bucket, ctx.author)
-        except BaseException:
-            pass
+
+                if ENABLE_REACT:
+                    await bucket.message.add_reaction(
+                        '\N{REGIONAL INDICATOR SYMBOL LETTER F}')
+        except BaseException as ex:
+            raise
 
 
 def setup(bot):
